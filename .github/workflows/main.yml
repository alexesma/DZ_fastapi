#main.yml
name: Main DragonZap Workflow
# Перечень событий-триггеров, при которых должен запускаться workflow
on:
  # Событие push возникает,
  # когда изменения исходного кода приходят на сервер GitHub
  push:
    # Отслеживаем изменения только в ветке main
    branches:
      - main
# Перечень задач
jobs:
  tests:
    # Разворачиваем окружение:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql+asyncpg://testuser:testpassword@127.0.0.1:5432/testdb
      ASYNCPG_DSN: postgresql+asyncpg://testuser:testpassword@127.0.0.1:5432/testdb
      TEST_DATABASE_URL: postgresql+asyncpg://testuser:testpassword@127.0.0.1:5432/testdb

    services:
      db:
        image: postgres:13.10
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: >-
          --health-cmd="pg_isready -U testuser"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    # Копируем код проекта
    - name: Check out code
      uses: actions/checkout@v3
    # Устанавливаем Python с помощью action
    - name: Set up Python
      uses: actions/setup-python@v4
    # В action setup-python@v4 передаём параметр — версию Python
      with:
        python-version: 3.12

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
    # Обновляем pip, устанавливаем flake8 и flake8-isort,
    # устанавливаем зависимости проекта
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        export PATH="$HOME/.local/bin:$PATH"

    - name: Install dependencies
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        poetry install

    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h 127.0.0.1 -p 5432 -U testuser; do
          echo "Waiting for PostgreSQL...";
          sleep 5;
        done

    - name: Debug Environment Variables
      run: env

    - name: Run database migrations
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        poetry run alembic upgrade head

    # Запускаем flake8
    - name: Test with flake8
      # Вызываем flake8 и указываем ему,
      # что нужно проверить файлы только в папке backend/
      run:  |
        export PATH="$HOME/.local/bin:$PATH"
        poetry run flake8 dz_fastapi/ tests/ check_db.py seed.py

    # Запускаем pytest
    - name: Run pytest
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        poetry run pytest

# Собрать и отправить образ приложения на Docker Hub
  build_and_push_to_docker_hub:
    runs-on: ubuntu-latest
    needs: tests  # Не выполнять сразу, ждать, пока выполнится tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        # Авторизация на Docker Hub
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile
          # находится в .
          context: .
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию
          tags: alexesma/dz_fastapi:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      # Дождёмся билда всех образов Taski
      - build_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    # Копируем docker-compose.production.yml на продакшен-сервер
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
    # Передаём параметры для action appleboy/scp-action:
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "infra/dev/init-db/docker-compose.dev.yaml"
        target: "/infra/dev/init-db/"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        # Параметр script передаёт в action appleboy/ssh-action команды,
        # которые нужно выполнить на сервере,
        # с которым установлено соединение
        script: |
          cd infra/dev/init-db/
          # Выполняет pull образов с Docker Hub
          sudo docker compose -f docker-compose.dev.yaml pull
          # Перезапускает все контейнеры в Docker Compose
          sudo docker compose -f docker-compose.dev.yaml down
          sudo docker compose -f docker-compose.dev.yaml up -d
          # Выполняет миграции и сбор статики
          sudo docker compose -f docker-compose.dev.yaml exec web poetry run alembic upgrade head
